limit = 1,
caller_identity = NA,
verbose = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = input,
name = "input",
class = c("character", "numeric")),
list(arg = species,
name = "species",
class = "numeric"),
list(arg = echo_query,
name = "echo_query",
class = "logical"),
list(arg = limit,
name = "limit",
class = "numeric"),
list(arg = caller_identity,
name = "caller_identity",
class = "character"),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## when querying more that 100 IDs, STRING returns a HTML page asking to specify the specie
if (length(input) > 100 && is.na(species)) {
stop("Input's length is ", length(input), ". Please Specify the specie. ",
"(Homo Sapiens NCBI taxa ID is 9606)\r\n")
}
if (verbose == TRUE){
message("Mapping ", length(input),
" Input Identifiers to STRING Identifiers.\r\n")
}
## build POST API request's body
call_body = list("format" = "text",
"identifiers" = paste(unique(input),collapse = "%0d"))
additional_pars = list(list(!is.na(species),
list("species" = species)),
list(echo_query == TRUE,
list("echo_query" = "1")),
list(!is.na(limit),
list("limit" = limit)),
list(!is.na(caller_identity),
list("caller_identity" = caller_identity)))
call_body = rba_ba_body_add_pars(call_body = call_body,
additional_pars = additional_pars)
## make function-specific calls
call_func_input = quote(httr::POST(url = getOption("url_string"),
path = "api/json/resolve",
body = call_body,
encode = "form",
httr::user_agent(getOption("rba_ua")),
httr::accept_json()
))
call_func_input = rba_ba_call_add_pars(call_func_input = call_func_input,
diagnostics = diagnostics,
progress_bar = progress_bar)
response_parser_input = quote(data.frame(jsonlite::fromJSON(httr::content(output,
as = "text",
encoding = "UTF-8"),
flatten = TRUE), stringsAsFactors = FALSE))
## call API
final_output = rba_ba_skeletion(call_function = call_func_input,
response_parser = response_parser_input,
verbose = verbose,
diagnostics = diagnostics)
return(final_output)
}
rba_string_map_ids(input = genes, species = 9606, diagnostics = TRUE)
httr::GET(url = getOption("url_string"),
path = "api/json/version",
body = call_body,
encode = "form",
httr::user_agent(getOption("rba_ua")),
httr::accept_json()
)
## build POST API request's body
call_body = list("format" = "text")
httr::GET(url = getOption("url_string"),
path = "api/json/version",
body = call_body,
encode = "form",
httr::user_agent(getOption("rba_ua")),
httr::accept_json()
)
#' #' @family STRING
#'
#' @param verbose
#' @param progress_bar
#' @param diagnostics
#'
#' @return
#' @export
#'
#' @examples
rba_string_version = function(verbose = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
if (verbose == TRUE){
message("Retrieving Current STRING database version.\r\n")
}
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## build POST API request's body
call_body = list("format" = "text")
## make function-specific calls
call_func_input = quote(httr::POST(url = getOption("url_string"),
path = "api/json/version",
body = call_body,
encode = "form",
httr::user_agent(getOption("rba_ua")),
httr::accept_json()
))
call_func_input = rba_ba_call_add_pars(call_func_input = call_func_input,
diagnostics = diagnostics,
progress_bar = progress_bar)
response_parser_input = quote(data.frame(jsonlite::fromJSON(httr::content(output,
as = "text",
encoding = "UTF-8"),
flatten = TRUE),
stringsAsFactors = FALSE))
## call API
final_output = rba_ba_skeletion(call_function = call_func_input,
response_parser = response_parser_input,
verbose = verbose,
diagnostics = diagnostics)
return(final_output)
}
rba_string_version()
rba_string_version(diagnostics = TRUE)
packageStartupMessage("Welcome to rbioAPI.\r\n",
"....Fill this message later....\r\n")
packageStartupMessage("Welcome to rbioAPI.\r\n",
"....Fill this message later....\r\n",
"Due to nature of this package, some function could",
"break after the databases changes in their API,")
date()
x = date
class(x)
x = date()
class(x)
x
packageStartupMessage("Welcome to rbioAPI.\r\n",
"....Fill this message later....\r\n",
"Due to nature of this package, some function could ",
"break after the databases changes in their API. ",
"if so, kindly report the broken function to ",
"..... github and email address... ",
"Last API verbs check for currently supported Databases:\r\n",
"STRING: Aug 04 2020\r\n",
"Enrichr: Aug 04 2020"
)
packageStartupMessage("Welcome to rbioAPI.\r\n",
"....Fill this message later....\r\n",
"Due to nature of this package, some function could ",
"break after the databases changes in their API. ",
"if so, kindly report the broken function to ",
"..... github and email address... \r\n",
"Last API verbs check for currently supported Databases:\r\n",
"STRING: Aug 04 2020\r\n",
"Enrichr: Aug 04 2020"
)
packageStartupMessage("Welcome to rbioAPI.\r\n",
"....Fill this message later....\r\n",
"Due to nature of this package, some function could ",
"break after the databases changes in their API. ",
"if so, kindly report the broken function to:\r\n",
"https://github.com/moosa-r/rbioapi ",
"or moosa.rezwani@gmail.com\r\n",
"Last API verbs check for currently supported Databases:\r\n",
"STRING: Aug 04 2020\r\n",
"Enrichr: Aug 04 2020"
)
packageStartupMessage("Welcome to rbioAPI.\r\n",
"This package provides an easy, user-friendly and ",
"unified access to Biological databases' API.\r\n",
"Due to nature of this package, some function could ",
"break after the databases changes in their API. ",
"if so, kindly report the broken function[s] to:\r\n",
"https://github.com/moosa-r/rbioapi ",
"or moosa.rezwani@gmail.com\r\n",
"Last API verbs check for currently supported Databases:\r\n",
"STRING: Aug 04 2020\r\n",
"Enrichr: Aug 04 2020"
)
packageStartupMessage("Welcome to rbioAPI.\r\n",
"This package provides an easy, user-friendly and ",
"unified access to Biological databases' API from R.\r\n",
"Due to nature of this package, some function could ",
"break after the databases changes in their API. ",
"if so, kindly report the broken function[s] to:\r\n",
"https://github.com/moosa-r/rbioapi ",
"or moosa.rezwani@gmail.com\r\n",
"Last API verbs check for currently supported Databases:\r\n",
"STRING: Aug 04 2020\r\n",
"Enrichr: Aug 04 2020"
)
match.arg("x")
library(rbioapi)
.onAttach
?getOption
getOption()
options()
class(options())
options()
which(grep("^rba_", names(options())))
grep("^rba_", names(options()))
x = grep("^rba_", names(options()))
length(options())
options()[[grep("^rba_", names(options()))]] == NULL
getOption(grep("^rba_", names(options())))
getOption(grepl("^rba_", names(options())))
getOption(grep("^rba_", names(options()), value = TRUE))
grep("^rba_", names(options()), value = TRUE)
options()[x]
string_genes = c("CDC42","CDK1","KIF23","PLK1",
"RAC2","RACGAP1","RHOA","RHOB")
#' rbioapi: User-friendly interface to Biological Databases' APIs
#'
#' This package provides and easy, user-friendly and unified access to Biological databases' API.
#' STRING, Reactome, Uniprot, Pubmed
#'
#' @section STRING functions:
#' map, interactions, image
#'
string_genes = c("CDC42","CDK1","KIF23","PLK1",
"RAC2","RACGAP1","RHOA","RHOB")
string_genes = c("CDC42","CDK1","KIF23","PLK1",
"RAC2","RACGAP1","RHOA","RHOB")
rba_string_map_ids(string_genes)
string_genes = c("p53", "BRCA1", "cdk2", "Q99835")
rba_string_map_ids(string_genes)
x = rba_string_map_ids(string_genes)
x
#' @param caller_identity (optional) Character, your identifier for STRING servers.
#' @param progress_bar Logical, Display Progress bar? (default = FALSE)
#' @param verbose Should the function print details? (default = FALSE)
#' @param diagnostics
#'
#' @references \url{https://string-db.org/help/api/#mapping-identifiers}
#' @return
#' @export
#'
#' @examples
rba_string_map_ids = function(input,
species = NA,
echo_query = FALSE,
limit = NA,
caller_identity = NA,
verbose = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = input,
name = "input",
class = c("character", "numeric")),
list(arg = species,
name = "species",
class = "numeric"),
list(arg = echo_query,
name = "echo_query",
class = "logical"),
list(arg = limit,
name = "limit",
class = "numeric"),
list(arg = caller_identity,
name = "caller_identity",
class = "character"),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## when querying more that 100 IDs, STRING returns a HTML page asking to specify the specie
if (length(input) > 100 && is.na(species)) {
stop("Input's length is ", length(input), ". Please Specify the specie. ",
"(Homo Sapiens NCBI taxa ID is 9606)\r\n")
}
if (verbose == TRUE){
message("Mapping ", length(input),
" Input Identifiers to STRING Identifiers.\r\n")
}
## build POST API request's body
call_body = list("format" = "text",
"identifiers" = paste(unique(input),collapse = "%0d"))
additional_pars = list(list(!is.na(species),
list("species" = species)),
list(echo_query == TRUE,
list("echo_query" = "1")),
list(!is.na(limit),
list("limit" = limit)),
list(!is.na(caller_identity),
list("caller_identity" = caller_identity)))
call_body = rba_ba_body_add_pars(call_body = call_body,
additional_pars = additional_pars)
## make function-specific calls
call_func_input = quote(httr::POST(url = getOption("rba_url_string"),
path = "api/json/resolve",
body = call_body,
encode = "form",
httr::user_agent(getOption("rba_ua")),
httr::accept_json()
))
call_func_input = rba_ba_call_add_pars(call_func_input = call_func_input,
diagnostics = diagnostics,
progress_bar = progress_bar)
response_parser_input = quote(data.frame(jsonlite::fromJSON(httr::content(output,
as = "text",
encoding = "UTF-8"),
flatten = TRUE), stringsAsFactors = FALSE))
## call API
final_output = rba_ba_skeletion(call_function = call_func_input,
response_parser = response_parser_input,
verbose = verbose,
diagnostics = diagnostics)
return(final_output)
}
x = rba_string_map_ids(string_genes)
x
string_genes = c("p53", "BRCA1", "cdk2", "Q99835", "CDC42","CDK1","KIF23","PLK1",
"RAC2","RACGAP1","RHOA","RHOB")
x = rba_string_map_ids(string_genes)
x
rba_string_interaction_partners(input = x$stringId, diagnostics = TRUE, progress_bar = TRUE)
y = rba_string_interaction_partners(input = x$stringId, diagnostics = TRUE, progress_bar = TRUE)
rba_string_network_image(y$preferredName_B, save_to = "c:/Users/moosa/Desktop/vhgv.svg", output_format = "image", progress_bar = TRUE)
rba_string_network_image(y$preferredName_B, save_to = "c:/Users/moosa/Desktop/vhgv.svg", output_format = "image", progress_bar = TRUE, species = 9606)
rba_string_network_image(y$preferredName_B, save_to = "c:/Users/moosa/Desktop/vhgv.svg", output_format = "svg", progress_bar = TRUE, species = 9606)
rba_string_network_image(y$preferredName_B[1:100], save_to = "c:/Users/moosa/Desktop/vhgv.svg", output_format = "svg", progress_bar = TRUE, species = 9606)
rba_string_network_image(y$preferredName_B[1:100], save_to = "c:/Users/moosa/Desktop/vhgv.png", output_format = "image", progress_bar = TRUE, species = 9606)
rba_string_network_image(y$preferredName_B, save_to = "c:/Users/moosa/Desktop/vhgv.svg", output_format = "svg", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
rba_string_network_image(y$preferredName_B[1:100], save_to = "c:/Users/moosa/Desktop/vhgv.png", output_format = "image", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
?httr::content_type
#' @param verbose
#' @param output_format
#' @param save_to
#' @param progress_bar
#' @param diagnostics
#'
#' @return
#' @export
#'
#' @examples
rba_string_network_image = function(input,
output_format = "image",
save_to = NA,
species = NA,
add_color_nodes = FALSE,
add_white_nodes = NA,
required_score = NA,
network_flavor = "confidence",
hide_node_labels = FALSE,
hide_disconnected_nodes = FALSE,
block_structure_pics_in_bubbles = FALSE,
caller_identity = NA,
verbose = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = input,
name = "input",
class = c("character", "numeric")),
list(arg = species,
name = "species",
class = "numeric"),
list(arg = output_format,
name = "output_format",
val = c("image", "highres_image", "svg")),
list(arg = save_to,
name = "save_to",
class = "character"),
list(arg = add_color_nodes,
name = "add_color_nodes",
class = "logical"),
list(arg = add_white_nodes,
name = "add_white_nodes",
class = "numeric"),
list(arg = required_score,
name = "required_score",
class = "numeric",
min_val = 0,
max_val = 1000),
list(arg = network_flavor,
name = "network_flavor",
val = c("evidence", "confidence", "actions")),
list(arg = hide_node_labels,
name = "hide_node_labels",
class = "logical"),
list(arg = hide_disconnected_nodes,
name = "hide_disconnected_nodes",
class = "logical"),
list(arg = block_structure_pics_in_bubbles,
name = "block_structure_pics_in_bubbles",
class = "logical"),
list(arg = caller_identity,
name = "caller_identity",
class = "character"),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## when querying more that 100 IDs, STRING returns a HTML page asking to specify the specie
if (length(input) > 100 && is.na(species)) {
stop("Input's length is ", length(input), ". Please Specify the specie. ",
"(Homo Sapiens NCBI taxa ID is 9606)\r\n")
}
if (verbose == TRUE){
message("Getting STRING network image of ", length(input),
" Input Identifiers.\r\n")
}
## build POST API request's body
call_body = list("format" = "text",
"identifiers" = paste(unique(input),collapse = "%0d"))
additional_pars = list(list(!is.na(species),
list("species" = species)),
list(add_color_nodes == TRUE,
list("add_color_nodes" = "1")),
list(!is.na(add_white_nodes),
list("add_white_nodes" = add_white_nodes)),
list(!is.na(required_score),
list("required_score" = required_score)),
list(!is.na(network_flavor),
list("network_flavor" = network_flavor)),
list(hide_node_labels == TRUE,
list("hide_node_labels" = "1")),
list(hide_disconnected_nodes == TRUE,
list("hide_disconnected_nodes" = "1")),
list(block_structure_pics_in_bubbles == TRUE,
list("block_structure_pics_in_bubbles" = "1")),
list(!is.na(caller_identity),
list("caller_identity" = caller_identity)))
call_body = rba_ba_body_add_pars(call_body = call_body,
additional_pars = additional_pars)
## make function-specific calls
call_func_input = quote(httr::POST(url = getOption("rba_url_string"),
path = "api/image/network",
body = call_body,
httr::write_disk(save_to, overwrite = TRUE),
httr::user_agent(getOption("rba_ua"))
))
call_func_input = rba_ba_call_add_pars(call_func_input = call_func_input,
diagnostics = diagnostics,
progress_bar = progress_bar)
response_parser_input = quote(httr::content(output,
type = "image/png"))
# create file_path
if (is.na(save_to)){
file_name = paste0(paste0(input[seq_len(min(3, length(input)))], collapse = "_"),
ifelse(output_format == "svg", ".svg", ".png"))
save_to = file.path(getwd(), "STRING_network_images", file_name)
dir.create(dirname(save_to), showWarnings = TRUE, recursive = TRUE)
message("No file path was provided with 'save_to' argument.",
" Saving to:\r\n", save_to, "\r\n")
} else {
if (verbose == TRUE) {
message("Saving to:\r\n", save_to, "\r\n")
}
}
## call API
final_output = rba_ba_skeletion(call_function = call_func_input,
response_parser = response_parser_input,
verbose = verbose,
diagnostics = diagnostics)
return(final_output)
}
rba_string_network_image(y$preferredName_B[1:100], save_to = "c:/Users/moosa/Desktop/vhgv.png", output_format = "image", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
rba_string_network_image(y$preferredName_B, save_to = "c:/Users/moosa/Desktop/vhgv.png", output_format = "image", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
rba_string_network_image(y$preferredName_B[1000], save_to = "c:/Users/moosa/Desktop/vhgv.png", output_format = "image", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
rba_string_network_image(y$preferredName_B[1000], save_to = "c:/Users/moosa/Desktop/vhhhh678gv.png", output_format = "image", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
rba_string_network_image(y$preferredName_A[1000], save_to = "c:/Users/moosa/Desktop/vhhhh678gv.png", output_format = "image", progress_bar = TRUE, species = 9606, diagnostics = TRUE)
genes = c("p53", "BRCA1", "cdk2", "Q99835", "CDC42","CDK1","KIF23","PLK1",
"RAC2","RACGAP1","RHOA","RHOB", "PHF14", "RBM3", "MSL1",
"PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1")
y = rba_string_interaction_partners(input = genes, diagnostics = TRUE, progress_bar = TRUE)
y
x = rba_string_map_ids(genes)
x
x = c(1,x)
x = c(1, "x")
x
