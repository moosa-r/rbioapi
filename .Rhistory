gene_set_library
hich(!gene_set_library %in% getOption("rba_enrichr_libs"))
which(!gene_set_library %in% getOption("rba_enrichr_libs"))
length(which(!gene_set_library %in% gene_set_library))
grep("kegg", getOption("rba_enrichr_libs"))
grep("kegg", getOption("rba_enrichr_libs"), ignore.case = TRUE)
grepl("kegg", getOption("rba_enrichr_libs"), ignore.case = TRUE)
grep("kegg", getOption("rba_enrichr_libs"), ignore.case = TRUE, value = TRUE)
grepl("erdtf", getOption("rba_enrichr_libs"), ignore.case = TRUE)
grep("erftg", getOption("rba_enrichr_libs"), ignore.case = TRUE, value = TRUE)
length(grep("erftg", getOption("rba_enrichr_libs"), ignore.case = TRUE, value = TRUE))
#' @param verbose
#' @param gene_set_library
#' @param multi_libs_progress_bar
#' @param diagnostics
#' @param progress_bar
#'
#' @return
#' @export
#'
#' @examples
rba_enrichr_enrich = function(user_list_id,
gene_set_library = "all",
regex_library_name = FALSE,
verbose = TRUE,
multi_libs_progress_bar = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
# get a list of available
if (is.null(getOption("rba_enrichr_libs"))){
if (verbose == TRUE) {
message("Calling rba_enrichr_info() to get a list of available enricr libraries.")
}
invisible(rba_enrichr_info(verbose = FALSE,
progress_bar = FALSE,
store_in_options = TRUE,
diagnostics = FALSE))
}
#### handle different gene_set_library input situations
if (length(gene_set_library) > 1) {
run_mode = "multiple"
message("note: You have selected ", length(gene_set_library),
" Enrichr libraries. ",
"note that for each library, a seperate call should be send to the ",
"Enrichr server. thus, this could take a while depending on the ",
"number of selected libraries and your network connection.")
} else if (gene_set_library == "all") {
run_mode = "multiple"
gene_set_library = getOption("rba_enrichr_libs")
message("note: You have selected to run the enrichment analysis on every ",
length(gene_set_library), " available Enrichr libraries. ",
"note that for each library, a seperate call should be send to the ",
"Enrichr server. thus, this could take a while depending on the ",
"number of selected libraries and your network connection.")
} else {
if (regex_library_name == FALSE) { run_mode = "single"
} else {
gene_set_library = grep(gene_set_library,
getOption("rba_enrichr_libs"),
ignore.case = TRUE, value = TRUE)
if (length(gene_set_library) == 0) {
stop("Your regex pattern did not match any enrichr library name.")
}
}
}
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = user_list_id,
name = "user_list_id",
class = c("numeric", "integer")),
list(arg = gene_set_library,
name = "gene_set_library",
class = "character",
val = getOption("rba_enrichr_libs")),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = multi_libs_progress_bar,
name = "multi_libs_progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## call Enrichr API
if (run_mode == "single") {
if (verbose == TRUE) {
message("Enriching Gene set ", user_list_id,
" using Enrichr library: ", gene_set_library)
}
final_output = rba_enrichr_enrich_internal(user_list_id_input = user_list_id,
gene_set_library_input = gene_set_library,
verbose_input = diagnostics,
progress_bar_input = progress_bar,
diagnostics_input = diagnostics)
return(final_output)
} else if (run_mode == "multiple") {
if (verbose == TRUE) {
message("Enriching Gene set ", user_list_id,
" using multiple Enrichr libraries:") }
final_output = as.list(gene_set_library)
names(final_output) = gene_set_library
## initiate progress bar
if (multi_libs_progress_bar == TRUE) {
pb = utils::txtProgressBar(min = 0,
max = length(gene_set_library),
style = 3)
}
final_output = purrr::map(final_output, function(x){
lib_enrich_res = rba_enrichr_enrich_internal(user_list_id_input = user_list_id,
gene_set_library_input = x,
verbose_input = verbose,
progress_bar_input = progress_bar,
diagnostics_input = diagnostics)
#advance the progress bar
if (multi_libs_progress_bar == TRUE) {
utils::setTxtProgressBar(pb, which(final_output == x))
}
return(lib_enrich_res)
})
close(pb)
return(final_output)
}
}
rba_enrichr_enrich(user_list_id = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg")
#' @param gene_set_library
#' @param multi_libs_progress_bar
#' @param progress_bar
#' @param verbose
#' @param diagnostics
#'
#' @return
#' @export
#'
#' @examples
rba_enrichr = function(gene_list,
description = NA,
gene_set_library = "all",
regex_library_name = FALSE,
multi_libs_progress_bar = TRUE,
progress_bar = FALSE,
verbose = TRUE,
diagnostics = FALSE) {
invisible(rba_ba_arguments_check(cons = list(list(arg = gene_list,
name = "gene_list",
class = "character"),
list(arg = description,
name = "description",
class = "character"),
list(arg = regex_library_name,
name = "regex_library_name",
class = "logical"),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = multi_libs_progress_bar,
name = "multi_libs_progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
if (verbose == TRUE){
message("--Step 1:")
}
invisible(rba_enrichr_info(verbose = verbose,
progress_bar = progress_bar,
store_in_options = TRUE,
diagnostics = FALSE))
if (verbose == TRUE){
message("--Step 2:")
}
list_id = rba_enrichr_add_list(gene_list = gene_list,
description = description,
verbose = verbose,
progress_bar = progress_bar,
diagnostics = diagnostics)
if (verbose == TRUE){
message("--Step 3:")
}
enriched = rba_enrichr_enrich(user_list_id = list_id$userListId,
gene_set_library = gene_set_library,
regex_library_name = regex_library_name,
verbose = verbose,
multi_libs_progress_bar = multi_libs_progress_bar,
progress_bar = progress_bar,
diagnostics = diagnostics)
return(enriched)
}
rba_enrichr(user_list_id = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg")
rba_enrichr(gene_list =  c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg")
rba_enrichr(gene_list =  c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg", regex_library_name = TRUE)
#' @param verbose
#' @param gene_set_library
#' @param multi_libs_progress_bar
#' @param diagnostics
#' @param progress_bar
#'
#' @return
#' @export
#'
#' @examples
rba_enrichr_enrich = function(user_list_id,
gene_set_library = "all",
regex_library_name = FALSE,
verbose = TRUE,
multi_libs_progress_bar = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
# get a list of available
if (is.null(getOption("rba_enrichr_libs"))){
if (verbose == TRUE) {
message("Calling rba_enrichr_info() to get a list of available enricr libraries.")
}
invisible(rba_enrichr_info(verbose = FALSE,
progress_bar = FALSE,
store_in_options = TRUE,
diagnostics = FALSE))
}
#### handle different gene_set_library input situations
if (length(gene_set_library) > 1) {
run_mode = "multiple"
message("note: You have selected ", length(gene_set_library),
" Enrichr libraries. ",
"note that for each library, a seperate call should be send to the ",
"Enrichr server. thus, this could take a while depending on the ",
"number of selected libraries and your network connection.")
} else if (gene_set_library == "all") {
run_mode = "multiple"
gene_set_library = getOption("rba_enrichr_libs")
message("note: You have selected to run the enrichment analysis on every ",
length(gene_set_library), " available Enrichr libraries. ",
"note that for each library, a seperate call should be send to the ",
"Enrichr server. thus, this could take a while depending on the ",
"number of selected libraries and your network connection.")
} else {
if (regex_library_name == FALSE) {
run_mode = "single"
} else {
gene_set_library = grep(gene_set_library,
getOption("rba_enrichr_libs"),
ignore.case = TRUE, value = TRUE)
if (length(gene_set_library) == 0) {
stop("Your regex pattern did not match any enrichr library name.")
} else if (length(gene_set_library) == 1) {
run_mode = "single"
} else if (length(gene_set_library) > 1) {
run_mode = "multiple"
}
}
}
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = user_list_id,
name = "user_list_id",
class = c("numeric", "integer")),
list(arg = gene_set_library,
name = "gene_set_library",
class = "character",
val = getOption("rba_enrichr_libs")),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = multi_libs_progress_bar,
name = "multi_libs_progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## call Enrichr API
if (run_mode == "single") {
if (verbose == TRUE) {
message("Enriching Gene set ", user_list_id,
" using Enrichr library: ", gene_set_library)
}
final_output = rba_enrichr_enrich_internal(user_list_id_input = user_list_id,
gene_set_library_input = gene_set_library,
verbose_input = diagnostics,
progress_bar_input = progress_bar,
diagnostics_input = diagnostics)
return(final_output)
} else if (run_mode == "multiple") {
if (verbose == TRUE) {
message("Enriching Gene set ", user_list_id,
" using multiple Enrichr libraries:") }
final_output = as.list(gene_set_library)
names(final_output) = gene_set_library
## initiate progress bar
if (multi_libs_progress_bar == TRUE) {
pb = utils::txtProgressBar(min = 0,
max = length(gene_set_library),
style = 3)
}
final_output = purrr::map(final_output, function(x){
lib_enrich_res = rba_enrichr_enrich_internal(user_list_id_input = user_list_id,
gene_set_library_input = x,
verbose_input = verbose,
progress_bar_input = progress_bar,
diagnostics_input = diagnostics)
#advance the progress bar
if (multi_libs_progress_bar == TRUE) {
utils::setTxtProgressBar(pb, which(final_output == x))
}
return(lib_enrich_res)
})
close(pb)
return(final_output)
}
}
rba_enrichr(gene_list =  c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg", regex_library_name = TRUE)
x = rba_enrichr(gene_list =  c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg", regex_library_name = TRUE)
x$KEGG_2016
#' @param verbose
#' @param gene_set_library
#' @param multi_libs_progress_bar
#' @param diagnostics
#' @param progress_bar
#'
#' @return
#' @export
#'
#' @examples
rba_enrichr_enrich = function(user_list_id,
gene_set_library = "all",
regex_library_name = FALSE,
verbose = TRUE,
multi_libs_progress_bar = TRUE,
progress_bar = FALSE,
diagnostics = FALSE){
# get a list of available
if (is.null(getOption("rba_enrichr_libs"))){
if (verbose == TRUE) {
message("Calling rba_enrichr_info() to get a list of available enricr libraries.")
}
invisible(rba_enrichr_info(verbose = FALSE,
progress_bar = FALSE,
store_in_options = TRUE,
diagnostics = FALSE))
}
#### handle different gene_set_library input situations
if (length(gene_set_library) > 1) {
run_mode = "multiple"
} else if (gene_set_library == "all") {
run_mode = "multiple"
gene_set_library = getOption("rba_enrichr_libs")
} else {
if (regex_library_name == FALSE) {
run_mode = "single"
} else {
gene_set_library = grep(gene_set_library,
getOption("rba_enrichr_libs"),
ignore.case = TRUE, value = TRUE)
#check the results of regex
if (length(gene_set_library) == 0) {
stop("Your regex pattern did not match any enrichr library name.")
} else if (length(gene_set_library) == 1) {
run_mode = "single"
} else if (length(gene_set_library) > 1) {
run_mode = "multiple"
}
}
}
## Check input arguments
invisible(rba_ba_arguments_check(cons = list(list(arg = user_list_id,
name = "user_list_id",
class = c("numeric", "integer")),
list(arg = gene_set_library,
name = "gene_set_library",
class = "character",
val = getOption("rba_enrichr_libs")),
list(arg = verbose,
name = "verbose",
class = "logical"),
list(arg = progress_bar,
name = "progress_bar",
class = "logical"),
list(arg = multi_libs_progress_bar,
name = "multi_libs_progress_bar",
class = "logical"),
list(arg = diagnostics,
name = "diagnostics",
class = "logical")),
diagnostics = diagnostics))
## call Enrichr API
if (run_mode == "single") {
if (verbose == TRUE) {
message("Enriching Gene set ", user_list_id,
" using Enrichr library: ", gene_set_library)
}
final_output = rba_enrichr_enrich_internal(user_list_id_input = user_list_id,
gene_set_library_input = gene_set_library,
verbose_input = diagnostics,
progress_bar_input = progress_bar,
diagnostics_input = diagnostics)
return(final_output)
} else if (run_mode == "multiple") {
message("note: You have selected ", length(gene_set_library),
" Enrichr libraries. ",
"note that for each library, a seperate call should be send to the ",
"Enrichr server. thus, this could take a while depending on the ",
"number of selected libraries and your network connection.")
if (verbose == TRUE) {
message("Enriching Gene set ", user_list_id,
" using multiple Enrichr libraries:") }
final_output = as.list(gene_set_library)
names(final_output) = gene_set_library
## initiate progress bar
if (multi_libs_progress_bar == TRUE) {
pb = utils::txtProgressBar(min = 0,
max = length(gene_set_library),
style = 3)
}
final_output = purrr::map(final_output, function(x){
lib_enrich_res = rba_enrichr_enrich_internal(user_list_id_input = user_list_id,
gene_set_library_input = x,
verbose_input = verbose,
progress_bar_input = progress_bar,
diagnostics_input = diagnostics)
#advance the progress bar
if (multi_libs_progress_bar == TRUE) {
utils::setTxtProgressBar(pb, which(final_output == x))
}
return(lib_enrich_res)
})
close(pb)
return(final_output)
}
}
library(rbioapi)
library(rbioapi)
natayej_iran = rba_enrichr(gene_list = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"))
natayej_iran$`COVID-19_Related_Gene_Sets`
natayej_iran = rba_enrichr(gene_list = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), verbose = "moosa")
natayej_iran = rba_enrichr(gene_list = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), verbose = TRUE)
natayej_iran = rba_enrichr(gene_list = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), verbose = FALSE)
natayej_iran = rba_enrichr(gene_list = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg", regex_library_name = TRUE)
natayej_iran = rba_enrichr(gene_list = c("PHF14", "RBM3", "MSL1", "PHF21A", "ARL10", "INSR", "JADE2",
"P2RX7", "LINC00662", "CCDC101", "PPM1B", "KANSL1L", "CRYZL1",
"ANAPC16", "TMCC1", "CDH8", "RBM11", "CNPY2", "HSPA1L", "CUL2",
"PLBD2", "LARP7", "TECPR2", "ZNF302", "CUX1", "MOB2", "CYTH2",
"SEC22C", "EIF4E3", "ROBO2", "ADAMTS9-AS2", "CXXC1", "LINC01314",
"ATF7", "ATP5F1"), gene_set_library = "kegg", regex_library_name = TRUE, diagnostics = TRUE)
BiocCheck::BiocCheck()
library(rbioapi)
library(rbioapi)
?devtools::check()
library(rbioapi)
library(rbioapi)
file.exists("~/.ssh/id_rsa.pub")
